use strict;
use warnings;
use Path::Tiny;

my $defs = q{
1 BASIC LATIN	0020 - 007E
2 LATIN-1 SUPPLEMENT	00A0 - 00FF
3 LATIN EXTENDED-A	0100 - 017F
4 LATIN EXTENDED-B	0180 - 024F
6 SPACING MODIFIER LETTERS	02B0 - 02FF
7 COMBINING DIACRITICAL MARKS	0300 - 036F
8 BASIC GREEK	0370 - 03CF
9 GREEK SYMBOLS AND COPTIC	03D0 - 03FF
10 CYRILLIC	0400 - 04FF
11 ARMENIAN	0530 - 058F
12 BASIC HEBREW	05D0 - 05EA
13 HEBREW EXTENDED	0590 - 05CF, 05EB - 05FF
14 BASIC ARABIC	0600 - 065F
15 ARABIC EXTENDED	0660 - 06FF
16 DEVANAGARI	0900 - 097F, 200C, 200D
17 BENGALI	0980 - 09FF,200C, 200D
18 GURMUKHI	0A00 - 0A7F,200C, 200D
19 GUJARATI	0A80 - 0AFF,200C, 200D
20 ORIYA	0B00 - 0B7F,200C, 200D
21 TAMIL	0B80 - 0BFF,200C, 200D
22 TELUGU	0C00 - 0C7F,200C, 200D
23 KANNADA	0C80 - 0CFF,200C, 200D
24 MALAYALAM	0D00 - 0D7F,200C, 200D
25 THAI	0E00 - 0E7F
26 LAO	0E80 - 0EFF
27 BASIC GEORGIAN	10D0 - 10FF
28 GEORGIAN EXTENDED	10A0 - 10CF
29 HANGUL JAMO	1100 - 11FF
30 LATIN EXTENDED ADDITIONAL	1E00 - 1EFF
31 GREEK EXTENDED	1F00 - 1FFF
32 GENERAL PUNCTUATION	2000 - 206F
33 SUPERSCRIPTS AND SUBSCRIPTS	2070 - 209F
34 CURRENCY SYMBOLS	20A0 - 20CF
35 COMBINING DIACRITICAL MARKS FOR SYMBOLS	20D0 - 20FF
36 LETTERLIKE SYMBOLS	2100 - 214F
37 NUMBER FORMS	2150 - 218F
38 ARROWS	2190 - 21FF
39 MATHEMATICAL OPERATORS	2200 - 22FF
40 MISCELLANEOUS TECHNICAL	2300 - 23FF
41 CONTROL PICTURES	2400 - 243F
42 OPTICAL CHARACTER RECOGNITION	2440 - 245F
43 ENCLOSED ALPHANUMERICS	2460 - 24FF
44 BOX DRAWING	2500 - 257F
45 BLOCK ELEMENTS	2580 - 259F
46 GEOMETRIC SHAPES	25A0 - 25FF
47 MISCELLANEOUS SYMBOLS	2600 - 26FF
48 DINGBATS	2700 - 27BF
49 CJK SYMBOLS AND PUNCTUATION	3000 - 303F
50 HIRAGANA	3040 - 309F
51 KATAKANA	30A0 - 30FF
52 BOPOMOFO	3100 - 312F,31A0 - 31BF
53 HANGUL COMPATIBILITY JAMO	3130 - 318F
54 CJK MISCELLANEOUS	3190 - 319F
55 ENCLOSED CJK LETTERS AND MONTHS	3200 - 32FF
56 CJK COMPATIBILITY	3300 - 33FF
## 57-59 were deleted at ISO/IEC 10646-1:1993 Amd.5 (so-called Korean mess)
57 Basic Hangul	3400-3D3D
58 Supplemental Hangul A	3D2E-44B7
58 Supplemental Hangul B	44BE-4DFF
60 CJK UNIFIED IDEOGRAPHS	4E00 - 9FFF
61 PRIVATE USE AREA	E000 - F8FF
62 CJK COMPATIBILITY IDEOGRAPHS	F900 - FAFF
63 ALPHABETIC PRESENTATION FORMS	FB00 - FB4F
64 ARABIC PRESENTATION FORMS-A	FB50 - FDFF
65 COMBINING HALF MARKS	FE20 - FE2F
66 CJK COMPATIBILITY FORMS	FE30 - FE4F
67 SMALL FORM VARIANTS	FE50 - FE6F
68 ARABIC PRESENTATION FORMS-B	FE70 - FEFE
69 HALFWIDTH AND FULLWIDTH FORMS	FF00 - FFEF
70 SPECIALS	FFF0 - FFFD
71 HANGUL SYLLABLES	AC00 - D7A3
72 BASIC TIBETAN	0F00 - 0FBF
73 ETHIOPIC	1200 - 137F
74 UNIFIED CANADIAN ABORIGINAL SYLLABICS	1400 - 167F
75 CHEROKEE	13A0 - 13FF
76 YI SYLLABLES	A000 - A48F
77 YI RADICALS	A490 - A4CF
78 KANGXI RADICALS	2F00 - 2FDF
79 CJK RADICALS SUPPLEMENT	2E80 - 2EFF
80 BRAILLE PATTERNS	2800 - 28FF
81 CJK UNIFIED IDEOGRAPHS EXTENSION A	3400 - 4DBF
82 OGHAM	1680 - 169F
83 RUNIC	16A0 - 16FF
84 SINHALA	0D80 - 0DFF
85 SYRIAC	0700 - 074F
86 THAANA	0780 - 07BF
87 BASIC MYANMAR	1000 - 104F,200C, 200D
88 KHMER	1780 - 17FF,200C, 200D
89 MONGOLIAN	1800 - 18AF
90 EXTENDED MYANMAR	1050 - 109F
91 TIBETAN	0F00 - 0FFF
200 ZERO-WIDTH BOUNDARY INDICATORS	200B - 200D,FEFF
201 FORMAT SEPARATORS	2028 - 2029
202 BI-DIRECTIONAL FORMAT MARKS	200E - 200F
203 BI-DIRECTIONAL FORMAT EMBEDDINGS	202A - 202E
204 HANGUL FILL CHARACTERS	3164, FFA0
205 CHARACTER SHAPING SELECTORS	206A - 206D
206 NUMERIC SHAPE SELECTORS	206E - 206F
207 IDEOGRAPHIC DESCRIPTION CHARACTERS	2FF0 - 2FFF
#270 COMBINING CHARACTERS
#271 COMBINING CHARACTERS B-2
## 92-101,180,10646 ISO/IEC 10646-1:2000 Amd.1
180 CJK UNIFIED IDEOGRAPHS ALL	3400-4DBF,4E00-9FFF,FA0E-FA0F,FA11,FA14-FA14,FA1F,FA21,FA23-FA24,FA27-FA29,20000-2A6DF
10646 UNICODE	0000-FDCF,FDF0-FFFD,10000-1FFFD,20000-2FFFD,E0000-EFFFD,F0000-FFFFD,100000-10FFFD
92 CYRILLIC SUPPLEMENTARY	0500-052F
93 TAGALOG	1700-171F
94 HANUNOO	1720-173F
95 BUHID	1740-175F
96 TAGBANWA	1760-177F
97 SUPPLEMENTAL ARROWS	2900-297F
98 MISCLLANEOUS MATHMATICAL SYMBOLS	2980-29FF
99 SUPPLEMENTAL MATHMATICAL OPERATORS	2A00-2AFF
100 KATAKANA PHONETIC EXTENSIONS	31F0-31FF
101 VARIATION SELECTORS	FE00-FE0F
## 104-108 ISO/IEC 10646-1:2000 Amd.2
104 LIMBU	1900-194F
105 TAI LE	1950-197F
106 SUPPLEMENTAL ARROWS-C	2B00-2B2F
107 SUPPLEMENTAL CJK COMPATIBILITY	31C0-31EF
108 YIJING HEXAGRAM SYMBOLS	4DC0-4DFF
## 1001-4000 ISO/IEC 10646-2:2001
1001 ETRUSCAN	010300-01032F
1002 GOTHIC	010330-01034F
1003 DESERET	010400-01044F
1004 BYZANTINE MUSICAL SYMBOLS	01D000-01D0FF
1005 WESTERN MUSICAL SYMBOLS	01D100-01D1FF
2001 CJK UNIFIED IDEOGRAPHS EXTENSION B	020000-02A71F
## Note: ISO/IEC 10646-2:2000 incorrectly gave collection No. 2001 to
##       CJK COMP. ID. SUPPLEMENT.  This was fixed by its Amd.1.
2002 CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT	02F800-02FA1F
3001 TAGS	0E0000-0E007F
3002 ALTERNATE FORMAT CHARACTERS EXTENDED	0E0000-0E0FFF
1000 SMP	010000-01FFFD
#1900 SMP COMBINING CHARACTERS
2000 SIP	020000-02FFFD
3000 SPP	0E0000-0EFFFD
4000 PART 2	010000-01FFFD,020000-02FFFD,0E0000-0EFFFD
## 1007-3002 ISO/IEC 10646-2:2001 Amd.1
1007 LINEAR B SYLLABARY	10000-1007F
1008 LINEAR B IDEOGRAMS	10080-100FF
1009 AEGAN NUMBERS	10100-1013F
1010 UGARITIC	10380-1039F
1011 SHAVIAN	10450-1047F
1012 OSMANYA	10480-104AF
1013 CYPRIOT SYLLABARY	10800-1083F
3002 VARIATION SELECTORS SUPPLEMENT	E0110-E01FF
};

my $Sets = {};

for (split /\x0D?\x0A/, $defs) {
  if (/^(\d+)\s([^\t]+)\t(.+)/) {
    my ($num, $name, $range) = (0+$1, $2, $3);
    $name =~ s/\s+/ /g;
    my $file_name = $name;
    $file_name =~ s/[^A-Za-z0-9-]/-/g;
    my @range;
    for (split /,/, $range) {
      s/\s+//g;
      if (/([0-9A-F]+)-([0-9A-F]+)/) {
        push @range, [hex $1, hex $2];
      } else {
        push @range, [hex $_];
      }
    }
    $Sets->{$file_name} = {label => $name, ranges => \@range};
    $Sets->{$num} = {label => $name, ref => $file_name};
  }
}

$Sets->{'ipa-extensions'} = {label => 'IPA EXTENSIONS',
                             ranges => [[0x0250, 0x02AF]]};
$Sets->{'5'} = {label => 'IPA EXTENSIONS', ref => 'ipa-extensions'};

$Sets->{'bmp'} = {label => 'BMP',
                  ranges => [[0x0000, 0xD7FF], [0xE000, 0xFFFD]]};
$Sets->{'300'} = {label => 'BMP', ref => 'bmp'};

$Sets->{'GENERAL-FORMAT-CHARACTERS'}
    = {label => 'GENERAL FORMAT CHARACTERS', ranges => []};
$Sets->{'250'} = {label => 'GENERAL FORMAT CHARACTERS',
                  ref => 'GENERAL-FORMAT-CHARACTERS'};
for (200, 201, 202, 203) {
  push @{$Sets->{'GENERAL-FORMAT-CHARACTERS'}->{ranges}},
      @{$Sets->{$Sets->{$_}->{ref}}->{ranges}}
}

$Sets->{'SCRIPT-SPECIFIC-FORMAT-CHARACTERS'}
    = {label => 'SCRIPT SPECIFIC FORMAT CHARACTERS', ranges => []};
$Sets->{'251'} = {label => 'SCRIPT SPECIFIC FORMAT CHARACTERS',
                  ref => 'SCRIPT-SPECIFIC-FORMAT-CHARACTERS'};
for (204, 205, 206, 207) {
  push @{$Sets->{'SCRIPT-SPECIFIC-FORMAT-CHARACTERS'}->{ranges}},
      @{$Sets->{$Sets->{$_}->{ref}}->{ranges}}
}

## 500-501 Removed by ISO/IEC 10646-1:2000 Amd.1
$Sets->{'PRIVATE-USE-PLANES'}
    = {label => 'PRIVATE USE PLANES',
       ranges => [[0x0F0000, 0x10FFFF], [0xE00000, 0xFFFFFF]]};
$Sets->{'500'} = {label => 'PRIVATE USE PLANES',
                  ref => 'PRIVATE-USE-PLANES'};

$Sets->{'PRIVATE-USE-GROUPS'}
    = {label => 'PRIVATE USE GROUPS',
       ranges => [[0x60000000, 0x7FFFFFFF]]};
$Sets->{'501'} = {label => 'PRIVATE USE GROUPS',
                  ref => 'PRIVATE-USE-GROUPS'};

sub ranges ($) {
  my $ranges = [];
  for (split /\x0D?\x0A/, $_[0]) {
    if (/^([0-9A-F]{4})\s+([0-9A-F]{4})$/) {
      push @$ranges, [hex $1, hex $2];
    } elsif (s/^([0-9A-F]{2})\s+//) {
      my $offset = 0x100 * hex $1;
      while (s/^([0-9A-F]{2})(?:-([0-9A-F]{2})|)\s*//) {
        if (defined $2) {
          push @$ranges, [$offset + hex $1, $offset + hex $2];
        } else {
          push @$ranges, [$offset + hex $1];
        }
      }
      s/^\s+//;
      die "Bad data |$_|" if length $_;

    } elsif (/\S/) {
      die "Bad line |$_|";
    }
  }
  return $ranges;
} # ranges

## 299 BMP FIRST EDITION (ISO/IEC 10646-1:2000 A.3.2)
$Sets->{'299-code-point'} = {label => 'BMP FIRST EDITION (by code position)',
                             ref => 'bmp-first-edition-code-point'};
$Sets->{'bmp-first-edition-code-point'}
    = {label => 'BMP FIRST EDITION (by code position)', ranges => ranges
q{
00 20-7E A0-FF
01 00-F5 FA-FF
02 00-17 50-A8 B0-DE E0-E9
03 00-45 60-61 74-75 7A 7E 84-8A 8C 8E-A1
03 A3-CE D0-D6 DA DC DE E0 E2-F3
04 01-0C 0E-4F 51-5C 5E-86 90-C4 C7-C8 CB-CC D0-EB EE-F5 F8-F9
05 31-56 59-5F 61-87 89 B0-B9 BB-C3 D0-EA F0-F4
06 0C 1B 1F 21-3A 40-52 60-6D 70-B7 BA-BE C0-CE D0-ED F0-F9
09 01-03 05-39 3C-4D 50-54 58-70 81-83 85-8C
09 8F-90 93-A8 AA-B0 B2 B6-B9 BC BE-C4
09 C7-C8 CB-CD D7 DC-DD DF-E3 E6-FA
0A 02 05-0A 0F-10 13-28 2A-30 32-33 35-36
0A 38-39 3C 3E-42 47-48 4B-4D 59-5C 5E 66-74
0A 81-83 85-8B 8D 8F-91 93-A8 AA-B0 B2-B3
0A B5-B9 BC-C5 C7-C9 CB-CD D0 E0 E6-EF
0B 01-03 05-0C 0F-10 13-28 2A-30 32-33 36-39
0B 3C-43 47-48 4B-4D 56-57 5C-5D 5F-61 66-70
0B 82-83 85-8A 8E-90 92-95 99-9A 9C 9E-9F
0B A3-A4 A8-AA AE-B5 B7-B9 BE-C2 C6-C8 CA-CD D7 E7-F2
0C 01-03 05-0C 0E-10 12-28 2A-33 35-39 3E-44
0C 46-48 4A-4D 55-56 60-61 66-6F 82-83 85-8C
0C 8E-90 92-A8 AA-B3 B5-B9 BE-C4 C6-C8 CA-CD D5-D6 DE E0-E1 E6-EF
0D 02-03 05-0C 0E-10 12-28 2A-39 3E-43 46-48 4A-4D 57 60-61 66-6F
0E 01-3A 3F-5B 81-82 84 87-88 8A 8D 94-97
0E 99-9F A1-A3 A5 A7 AA-AB AD-B9 BB-BD C0-C4 C6 C8-CD D0-D9 DC-DD
10 A0-C5 D0-F6 FB
11 00-59 5F-A2 A8-F9
1E 00-9A A0-F9
1F 00-15 18-1D 20-45 48-4D 50-57 59 5B 5D
1F 5F-7D 80-B4 B6-C4 C6-D3 D6-DB DD-EF F2-F4 F6-FE
20 00-2E 30-46 6A-70 74-8E A0-AA D0-E1
21 00-38 53-82 90-EA
22 00-F1
23 00 02-7A
24 00-24 40-4A 60-EA
25 00-95 A0-EF
26 00-13 1A-6F
27 01-04 06-09 0C-27 29-4B 4D 4F-52 56 58-5E 61-67 76-94 98-AF B1-BE
30 00-37 3F 41-94 99-9E A1-FE
31 05-2C 31-8E 90-9F
32 00-1C 20-43 60-7B 7F-B0 C0-CB D0-FE
33 00-76 7B-DD E0-FE
FB 00-06 13-17 1E-36 38-3C 3E 40-41 43-44 46-B1 D3-FF
FC 00-FF
FD 00-3F 50-8F 92-C7 F0-FB
FE 20-23 30-44 49-52 54-66 68-6B 70-72 74 76-FC FF
FF 01-5E 61-BE C2-C7 CA-CF D2-D7 DA-DC E0-E6 E8-EE FD
3400	4DFF
4E00	9FA5
E000	F8FF
F900	FA2D
}};

## 301 BMP-AMD.7 (ISO/IEC 10646-1:2000 A.3.1)
$Sets->{'301'} = {label => 'BMP-AMD.7', ref => 'bmp-amd-7'};
$Sets->{'bmp-amd-7'} = {label => 'BMP-AMD.7', ranges => ranges
q{
00 20-7E A0-FF
01 00-F5 FA-FF
02 00-17 50-A8 B0-DE E0-E9
03 00-45 60-61 74-75 7A 7E 84-8A 8C 8E-A1
03 A3-CE D0-D6 DA DC DE E0 E2-F3
04 01-0C 0E-4F 51-5C 5E-86 90-C4 C7-C8 CB-CC D0-EB EE-F5 F8-F9
05 31-56 59-5F 61-87 89 91-A1 A3-B9 BB-C4 D0-EA F0-F4
06 0C 1B 1F 21-3A 40-52 60-6D 70-B7 BA-BE C0-CE D0-ED F0-F9
09 01-03 05-39 3C-4D 50-54 58-70 81-83 85-8C
09 8F-90 93-A8 AA-B0 B2 B6-B9 BC BE-C4
09 C7-C8 CB-CD D7 DC-DD DF-E3 E6-FA
0A 02 05-0A 0F-10 13-28 2A-30 32-33 35-36
0A 38-39 3C 3E-42 47-48 4B-4D 59-5C 5E 66-74
0A 81-83 85-8B 8D 8F-91 93-A8 AA-B0 B2-B3
0A B5-B9 BC-C5 C7-C9 CB-CD D0 E0 E6-EF
0B 01-03 05-0C 0F-10 13-28 2A-30 32-33 36-39
0B 3C-43 47-48 4B-4D 56-57 5C-5D 5F-61 66-70
0B 82-83 85-8A 8E-90 92-95 99-9A 9C 9E-9F
0B A3-A4 A8-AA AE-B5 B7-B9 BE-C2 C6-C8 CA-CD D7 E7-F2
0C 01-03 05-0C 0E-10 12-28 2A-33 35-39 3E-44
0C 46-48 4A-4D 55-56 60-61 66-6F 82-83 85-8C
0C 8E-90 92-A8 AA-B3 B5-B9 BE-C4 C6-C8 CA-CD D5-D6 DE E0-E1 E6-EF
0D 02-03 05-0C 0E-10 12-28 2A-39 3E-43 46-48 4A-4D 57 60-61 66-6F
0E 01-3A 3F-5B 81-82 84 87-88 8A 8D 94-97
0E 99-9F A1-A3 A5 A7 AA-AB AD-B9 BB-BD C0-C4 C6 C8-CD D0-D9 DC-DD
0F 00-47 49-69 71-8B 90-95 97 99-AD B1-B7 B9
10 A0-C5 D0-F6 FB
11 00-59 5F-A2 A8-F9
1E 00-9B A0-F9
1F 00-15 18-1D 20-45 48-4D 50-57 59 5B 5D
1F 5F-7D 80-B4 B6-C4 C6-D3 D6-DB DD-EF F2-F4 F6-FE
20 00-2E 30-46 6A-70 74-8E A0-AB D0-E1
21 00-38 53-82 90-EA
22 00-F1
23 00 02-7A
24 00-24 40-4A 60-EA
25 00-95 A0-EF
26 00-13 1A-6F
27 01-04 06-09 0C-27 29-4B 4D 4F-52 56 58-5E 61-67 76-94 98-AF B1-BE
30 00-37 3F 41-94 99-9E A1-FE
31 05-2C 31-8E 90-9F
32 00-1C 20-43 60-7B 7F-B0 C0-CB D0-FE
33 00-76 7B-DD E0-FE
FB 00-06 13-17 1E-36 38-3C 3E 40-41 43-44 46-B1 D3-FF
FC 00-FF
FD 00-3F 50-8F 92-C7 F0-FB
FE 20-23 30-44 49-52 54-66 68-6B 70-72 74 76-FC FF
FF 01-5E 61-BE C2-C7 CA-CF D2-D7 DA-DC E0-E6 E8-EE FD
4E00	9FA5
AC00	D7A3
E000	F8FF
F900	FA2D
}};

## 302 BMP SECOND EDITION (ISO/IEC 10646-1:2000 A.3.3)
$Sets->{'302'} = {label => 'BMP SECOND EDITION', ref => 'bmp-second-edition'};
$Sets->{'bmp-second-edition'} = {label => 'BMP SECOND EDITION', ranges => ranges
q{
00 20-7E A0-FF
01 00-FF
02 00-33 50-AD B0-EE
03 00-4E 60-62 74-75 7A 7E 84-8A 8C 8E-A1 A3-CE D0-D7 DA-F3
04 00-86 88-89 8C-C4 C7-C8 CB-CC D0-F5 F8-F9
05 31-56 59-5F 61-87 89-8A 91-A1 A3-B9 BB-C4 D0-EA F0-F4
06 0C 1B 1F 21-3A 40-55 60-6D 70-ED F0-FE
07 00-0D 0F-2C 30-4A 80-BF
09 01-03 05-39 3C-4D 50-54 58-70 81-83 85-8C 8F-90 93-A8 AA-B0
09 B2 B6-B9 BC BE-C4 C7-C8 CB-CD D7 DC-DD DF-E3 E6-FA
0A 02 05-0A 0F-10 13-28 2A-30 32-33 35-36
0A 38-39 3C 3E-42 47-48 4B-4D 59-5C 5E 66-74 81-83 85-8B
0A 8D 8F-91 93-A8 AA-B0 B2-B3 B5-B9 BC-C5 C7-C9 CB-CD D0 E0 E6-EF
0B 01-03 05-0C 0F-10 13-28 2A-30 32-33 36-39
0B 3C-43 47-48 4B-4D 56-57 5C-5D 5F-61 66-70
0B 82-83 85-8A 8E-90 92-95 99-9A 9C 9E-9F
0B A3-A4 A8-AA AE-B5 B7-B9 BE-C2 C6-C8 CA-CD D7 E7-F2
0C 01-03 05-0C 0E-10 12-28 2A-33 35-39 3E-44
0C 46-48 4A-4D 55-56 60-61 66-6F 82-83 85-8C
0C 8E-90 92-A8 AA-B3 B5-B9 BE-C4 C6-C8 CA-CD D5-D6 DE E0-E1 E6-EF
0D 02-03 05-0C 0E-10 12-28 2A-39 3E-43 46-48
0D 4A-4D 57 60-61 66-6F 82-83 85-96 9A-B1
0D B3-BB BD C0-C6 CA CF-D4 D6 D8-DF F2-F4
0E 01-3A 3F-5B 81-82 84 87-88 8A 8D 94-97
0E 99-9F A1-A3 A5 A7 AA-AB AD-B9 BB-BD C0-C4 C6 C8-CD D0-D9 DC-DD
0F 00-47 49-6A 71-8B 90-97 99-BC BE-CC CF
10 00-21 23-27 29-2A 2C-32 36-39 40-59 A0-C5 D0-F6 FB
11 00-59 5F-A2 A8-F9
12 20-26 28-46 48 4A-4D 50-56 58 5A-5D 60-86 88 8A-8D
12 90-AE B0 B2-B5 B8-BE C0 C2-C5 C8-CE D0-D6 D8-EE F0-FF
13 00-0E 10 12-15 18-1E 20-46 48-5A 61-7C A0-F4
16 00-76 80-9C A0-F0
17 80-DC E0-E9
18 00-0E 10-19 20-77 80-A9
1E 00-9B A0-F9
1F 00-15 18-1D 20-45 48-4D 50-57 59 5B 5D
1F 5F-7D 80-B4 B6-C4 C6-D3 D6-DB DD-EF F2-F4 F6-FE
20 00-46 48-4D 4F 6A-70 74-8E A0-AF D0-E3
21 00-3A 53-83 90-F3
22 00-F1
23 00-7B 7D-9A
24 00-26 40-4A 60-EA
25 00-95 A0-F7
26 00-13 19-71
27 01-04 06-09 0C-27 29-4B 4D 4F-52 56 58-5E 61-67 76-94 98-AF B1-BE
28 00-FF
2E 80-99 9B-F3
2F 00-D5 F0-FB
30 00-3A 3E-3F 41-94 99-9E A1-FE
31 05-2C 31-8E 90-B7
32 00-1C 20-43 60-7B 7F-B0 C0-CB D0-FE
33 00-76 7B-DD E0-FE
A4 00-8C 90-A1 A4-B3 B5-C0 C2-C4 C6
FB 00-06 13-17 1D-36 38-3C 3E 40-41 43-44 46-B1 D3-FF
FC 00-FF
FD 00-3F 50-8F 92-C7 F0-FB
FE 20-23 30-44 49-52 54-66 68-6B 70-72 74 76-FC FF
FF 01-5E 61-BE C2-C7 CA-CF D2-D7 DA-DC E0-E6 E8-EE F9-FD
1401	15FF
4E00	9FA5
AC00	D7A3
E000	F8FF
F900	FA2D
}};

## 281-284 ISO/IEC 10646-1:2000 Amd.1
$Sets->{'281'} = {label => 'MES1', ref => 'mes1'};
$Sets->{'mes1'} = {label => 'MES1', ranges => ranges
q{
00  20-7E A0-FF
01  00-13 16-2B 2E-4D 50-7E
02  C7 D8-DB DD
20  15 18-19 1C-1D AC
21  22 26 5B-5E 90-93
26  6A
}};

$Sets->{'282'} = {label => 'MES2', ref => 'mes2'};
$Sets->{'mes2'} = {label => 'MES2', ranges => ranges
q{
00  20-7E A0-FF
01  00-7F 8F 92 B7 DE-EF FA-FF
02  18-1B 1E-1F 59 7C 92 BB-BD C6-C7 C9 D8-DD EE
03  74-75 7A 7E 84-8A 8C 8E-A1 A3-CE D7 DA-E1
04  00-5F 90-C4 C7-C8 CB-CC D0-EB EE-F5 F8-F9
1E  02-03 0A-0B 1E-1F 40-41 56-57 60-61 6A-6B 80-85 9B F2-F3
1F  00-15 18-1D 20-45 48-4D 50-57 59 5B 5D 5F-7D 80-B4 B6-C4 C6-D3 D6-DB DD-EF
1F  F2-F4 F6-FE
20  13-15 17-1E 20-22 26 30 32-33 39-3A 3C 3E 44 4A 7F 82 A3-A4 A7 AC AF
21  05 16 22 26 5B-5E 90-95 A8
22  00 02-03 06 08-09 0F 11-12 19-1A 1E-1F 27-2B 48 59 60-61 64-65 82-83 95 97
23  02 10 20-21 29-2A
25  00 02 0C 10 14 18 1C 24 2C 34 3C 50-6C 80 84 88 8C 90-93 A0 AC B2 BA BC C4
25  CA-CB D8-D9
26  3A-3C 40 42 60 63 65-66 6A-6B
FB  01-02
FF  FD
}};

$Sets->{'283'} = {label => 'MES3A', ref => 'mes3a'};
$Sets->{'mes3a'} = {label => 'MES3A', ranges => []};
for (1..11, 27, 30..40, 42, 44..47, 63, 65, 70) {
  push @{$Sets->{'mes3a'}->{ranges}},
      @{$Sets->{$Sets->{$_}->{ref}}->{ranges}}
}

$Sets->{'284'} = {label => 'MES3B', ref => 'mes3b'};
$Sets->{'mes3b'} = {label => 'MES3B', ranges => ranges
q{
00  20-7E A0-FF
01  00-FF
02  00-1F 22-33 50-AD B0-EE
03  00-4E 60-62 74-75 7A 7E 84-8A 8C 8E-A1 A3-CE D0-D7 DA-F3
04  00-86 88-89 8C-C4 C7-C8 CB-CC D0-F5 F8-F9
05  31-56 59-5F 61-87 89-8A
10  D0-F6 FB
1E  00-9B A0-F9
1F  00-15 18-1D 20-45 48-4D 50-57 59 5B 5D 5F-7D 80-B4 B6-C4 C6-D3 D6-DB DD-EF
1F  F2-F4 F6-FE
20  00-46 48-4D 6A-70 74-8E A0-AF D0-E3
21  00-3A 53-83 90-F3
22  00-F1
23  00-7B 7D-9A
24  40-4A
25  00-95 A0-F7
26  00-13 19-71
FB  00-06 13-17
FE  20-23
FF  F9-FD
}};

my $data_path = path (__FILE__)->parent;
for my $file_name (keys %$Sets) {
  my $def = $Sets->{$file_name};
  my $path = $data_path->child ("$file_name.expr");
  my $data = qq{};
  $data .= qq{#label:$def->{label}\n} if defined $def->{label};
  if (defined $def->{ref}) {
    $data .= q{$isoiec10646:} . $def->{ref};
  } else {
    $data .= qq{[\n};
    for my $range (@{$def->{ranges} or []}) {
      if (defined $range->[1] and $range->[0] != $range->[1]) {
        $data .= sprintf q{\\u{%04X}-\\u{%04X}}, $range->[0], $range->[1];
        unless ($range->[0] < $range->[1]) {
          die "Bad range: " . $data;
        }
      } else {
        $data .= sprintf q{\\u{%04X}}, $range->[0];
      }
    }
    $data .= q{]};
  }
  $path->spew ($data);
}
